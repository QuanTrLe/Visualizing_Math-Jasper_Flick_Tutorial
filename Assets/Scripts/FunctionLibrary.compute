#pragma kernel WaveKernel
#pragma kernel MultiWaveKernel
#pragma kernel RippleKernel
#pragma kernel SphereKernel
#pragma kernel TorusKernel 

RWStructuredBuffer<float3> _Positions;

uint _Resolution;

float _Step, _Time;

#define PI 3.14159265358979323846


float2 GetUV(uint3 id)
{
    return ((id.xy + 0.5) * _Step - 1.0);
}

void SetPosition(uint3 id, float3 position)
{
    if ((id.x < _Resolution) && (id.y < _Resolution))
    {
        _Positions[id.x + id.y * _Resolution] = position;
    }
}

float3 Wave(float u, float v, float t)
{
    float3 p;

    p.x = u;
    p.y = sin(PI * (u + v + t));
    p.z = v;

    return p; //sin wave formula
}

float3 MultiWave (float u, float v, float t) {
	float3 p;
	p.x = u;
	p.y = sin(PI * (u + 0.5 * t));
	p.y += 0.5 * sin(2.0 * PI * (v + t));
	p.y += sin(PI * (u + v + 0.25 * t));
	p.y *= 1.0 / 2.5;
	p.z = v;
	return p;
}

float3 Ripple (float u, float v, float t) {
	float d = sqrt(u * u + v * v);
	float3 p;

	p.x = u;

	p.y = sin(PI * (4.0 * d - t));
	p.y = p.y / (1.0 + 10.0 * d); //to reduce the amplitude so that it does not go off screen 

	p.z = v;

	return p; //to reduce the amplitude so that it does not go off screen
} 

float3 Sphere(float u, float v, float t)
{
	float3 p;

	float r = 0.9 + 0.1 * sin(PI * (6.0 * u + 4.0 * v + t));
	float s = r * cos(0.5 * PI * v);

	p.x = s * sin(PI * u);
	p.y = r * sin(0.5 * PI * v);
	p.z = s * cos(PI * u);

	return p;
}

float3 Torus(float u, float v, float t)
{
	float3 p;

	float r1 = 1.0 + 0.1 * sin(PI * (6.0 * u + 0.5 * t)); //the major radius, radius of the whole thing
	float r2 = 0.35 + 0.05 * sin(PI * (8.0 * u + 4.0 * v + 2.0 * t)); //the minor radius, radius of the minor circle/sphere
	float s = r1 + r2 * cos(PI * v);

	p.x = s * sin(PI * u);
	p.y = r2 * sin(PI * v);
	p.z = s * cos(PI * u);

	return p;
}

//The \ below are for extending the line for the define. Ngl seems kinda cursed. 
#define KERNEL_FUNCTION(function) \
    [numthreads(8, 8, 1)] \
    void function##Kernel (uint3 id: SV_DispatchThreadID){ \
        float2 uv = GetUV(id); \
        SetPosition(id, function(uv.x, uv.y, _Time)); \
    }

KERNEL_FUNCTION(Wave)
KERNEL_FUNCTION(MultiWave)  
KERNEL_FUNCTION(Ripple)
KERNEL_FUNCTION(Sphere)
KERNEL_FUNCTION(Torus)